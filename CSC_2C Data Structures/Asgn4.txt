// File FHsearch_tree.h MICHAEL SILIN FOOTHILL CS2C JIM LAI W18
// Template definitions for FHsearchTrees, which are general trees
#ifndef FHLAZYSEARCHTREE_H
#define FHLAZYSEARCHTREE_H
#include <iostream>
using namespace std;

// ---------------------- FHlazySearchTreeNode Prototype --------------------------
template <class Comparable>
class FHlazySearchTreeNode
{
public:
   FHlazySearchTreeNode( const Comparable & d = Comparable(),
      FHlazySearchTreeNode *lt = NULL,
      FHlazySearchTreeNode *rt = NULL)
      : lftChild(lt), rtChild(rt), data(d) , deleted(false)
   { }

   FHlazySearchTreeNode *lftChild, *rtChild;
   Comparable data;
   bool deleted;
   // for use only with AVL Trees
   virtual int getHeight() const { return 0; }
   virtual bool setHeight(int height) { return true; }
}; 

// ---------------------- FHlazySearchTree  Prototype --------------------------
template <class Comparable>
class FHlazySearchTree
{
protected:
   int mSize;
   FHlazySearchTreeNode<Comparable> *mRoot;

public:
   FHlazySearchTree() { mSize = 0; mRoot = NULL; mSizeHard = 0;}
   FHlazySearchTree(const FHlazySearchTree  &rhs)
      { mRoot = NULL; mSize = 0; mSizeHard = 0; *this = rhs; }
   ~FHlazySearchTree() { clear(); }

   const Comparable &findMin() const;
   const Comparable &findMax() const;
   const Comparable &find(const Comparable &x) const;
   
   bool empty() const { return (mSize == 0); }
   int size() const { return mSize; }
   int sizeHard() const {return mSizeHard; }
   void clear() { makeEmpty(mRoot); }
   const FHlazySearchTree  & operator=(const FHlazySearchTree  &rhs);
   
   bool insert(const Comparable &x);
   bool remove(const Comparable &x);
   bool contains(const Comparable &x) const { return find(mRoot, x) != NULL; }
   int mSizeHard;

   void collectGarbage();

   template <class Processor>
   void traverse(Processor func) const { traverse(mRoot, func); }
   int showHeight() const { return findHeight(mRoot); }
   
   FHlazySearchTreeNode<Comparable> *findDel( FHlazySearchTreeNode<Comparable> *root) const;
protected:
   FHlazySearchTreeNode<Comparable> *clone(FHlazySearchTreeNode<Comparable> *root) const;
   FHlazySearchTreeNode<Comparable> *findMin(FHlazySearchTreeNode<Comparable> *root) const;
   FHlazySearchTreeNode<Comparable> *findMax(FHlazySearchTreeNode<Comparable> *root) const;
   FHlazySearchTreeNode<Comparable> *find(FHlazySearchTreeNode<Comparable> *root,
      const Comparable &x) const;
   bool insert(FHlazySearchTreeNode<Comparable> * &root,
      const Comparable &x);
   void collectGarbage(FHlazySearchTreeNode<Comparable> * &root);
   bool remove(FHlazySearchTreeNode<Comparable> * &root, const Comparable &x);
   bool removeHard(FHlazySearchTreeNode<Comparable> * &root, const Comparable &x);

   void makeEmpty(FHlazySearchTreeNode<Comparable> * &subtreeToDelete);
   
   template <class Processor>
   void traverse(FHlazySearchTreeNode<Comparable> *treeNode,
      Processor func, int level = -1) const;
   int findHeight(FHlazySearchTreeNode<Comparable> *treeNode, int height = -1) const;
   
   
   
   

public:
   // for exception throwing
   class EmptyTreeException {};
   class NotFoundException {};
};

// FHlazySearchTree  public method definitions -----------------------------
template <class Comparable>
const Comparable & FHlazySearchTree <Comparable>::findMin() const
{
   if (mRoot == NULL)
      throw EmptyTreeException();
   return findMin(mRoot)->data;
}

template <class Comparable>
const Comparable & FHlazySearchTree <Comparable>::findMax() const
{
   if (mRoot == NULL)
      throw EmptyTreeException();
   return findMax(mRoot)->data;
}

template <class Comparable>
const Comparable &FHlazySearchTree <Comparable>::find(
   const Comparable &x) const
{ 
   FHlazySearchTreeNode<Comparable> *resultNode;
   
   resultNode = find(mRoot, x);
   if (resultNode == NULL)
      throw NotFoundException();
    return resultNode->data;
}

template <class Comparable>
FHlazySearchTreeNode<Comparable> *FHlazySearchTree <Comparable>::findDel( FHlazySearchTreeNode<Comparable> *root) const
{
   if (root == NULL)
      return NULL;

   if (root->deleted == true)
      return root;
   else if (findDel(root->lftChild)->deleted == true)
      return findDel(root->lftChild);

   else if (findDel(root->rtChild)->deleted == true)
      return findDel(root->rtChild);
}


template <class Comparable>
const FHlazySearchTree <Comparable> &FHlazySearchTree <Comparable>::operator=
   (const FHlazySearchTree  &rhs)
{
   if (&rhs != this) 
   {
      clear();
      mRoot = clone(rhs.mRoot);
      mSize = rhs.size();
      mSizeHard = rhs.sizeHard();
   }
   return *this;
}

template <class Comparable>
bool FHlazySearchTree <Comparable>::insert(const Comparable &x)
{
   if (insert(mRoot, x))
   {
      mSize++;
      mSizeHard++;
      return true;
   }
   return false;
}

template <class Comparable>
bool FHlazySearchTree <Comparable>::remove(const Comparable &x)
{
   //cout << mRoot->data << endl;
   if (remove(mRoot, x))
   {
      mSize--;
      return true;
   }
   return false;
}

template <class Comparable>
void FHlazySearchTree <Comparable>::collectGarbage()
{
   int i = mSize;
   int j = mSizeHard;
	
   for (i = mSize; i< j; i++)
   {      
      mSizeHard--;      
      FHlazySearchTreeNode<Comparable> *tempNode = NULL;
      tempNode = findDel(mRoot);      
      //cout<< tempNode->data << endl;
      if (mSize > 0 )
      {
         cout<<"true"<<endl;
         tempNode->deleted = false;
      }      
      removeHard(mRoot, tempNode->data);     
      //cout<<"SIZEHARD "<< mSizeHard<<endl;
        //cout<<"SIZE"<< mSize<<endl;
   } 
}

template <class Comparable>
template <class Processor>
void FHlazySearchTree <Comparable>::traverse(FHlazySearchTreeNode<Comparable> *treeNode,
   Processor func, int level) const
{
   if (treeNode == NULL)
      return;
   // we're not doing anything with level but its there in case we want it
   traverse(treeNode->lftChild, func, level + 1);
   if (treeNode->deleted != true)
   {
      cout<<treeNode->data<<" ";
   }
   traverse(treeNode->rtChild, func, level + 1);
}


// FHlazySearchTree  private method definitions -----------------------------
template <class Comparable>
FHlazySearchTreeNode<Comparable> *FHlazySearchTree <Comparable>::clone(
   FHlazySearchTreeNode<Comparable> *root) const
{
   FHlazySearchTreeNode<Comparable> *newNode;
   if (root == NULL)
      return NULL;

   newNode =  new FHlazySearchTreeNode<Comparable>(
      root->data, 
      clone(root->lftChild), clone(root->rtChild));
   return newNode;
}

template <class Comparable>
FHlazySearchTreeNode<Comparable> *FHlazySearchTree <Comparable>::findMin(
   FHlazySearchTreeNode<Comparable> *root) const
{
   if (root == NULL)
      return NULL;
   if (root->lftChild == NULL)
      return root;
   return findMin(root->lftChild);
}

template <class Comparable>
FHlazySearchTreeNode<Comparable> *FHlazySearchTree <Comparable>::findMax(
   FHlazySearchTreeNode<Comparable> *root) const
{
   if (root == NULL)
      return NULL;
   if (root->rtChild == NULL)
      return root;
   return findMax(root->rtChild);
}

template <class Comparable>
FHlazySearchTreeNode<Comparable>* FHlazySearchTree <Comparable>::find(
   FHlazySearchTreeNode<Comparable> *root, const Comparable &x) const
{
   if (root == NULL)
      return NULL;
   if (x < root->data)
      return find(root->lftChild, x);
   if (root->data < x)
      return find(root->rtChild, x);
   return root;
}

template <class Comparable>
bool FHlazySearchTree <Comparable>::insert(
   FHlazySearchTreeNode<Comparable> * &root, const Comparable &x)
{
   if (root == NULL)
   {
      root = new    FHlazySearchTreeNode<Comparable>(x, NULL, NULL);
      return true;
   }
   else if (x < root->data)
      return insert(root->lftChild, x);
   else if (root->data < x)
      return insert(root->rtChild, x);
   if (root->deleted = true)
   {
      root->deleted = false;
      mSize ++;
   }
   return false; // duplicate
}

template <class Comparable>
bool FHlazySearchTree<Comparable>::removeHard(
   FHlazySearchTreeNode<Comparable> * &root, const Comparable &x)
{
   if (root == NULL)
      return false;
   if (x < root->data)
      return removeHard(root->lftChild, x);
   if (root->data < x)
      return removeHard(root->rtChild, x);
   // found the node
   if (root->lftChild != NULL && root->rtChild != NULL)
   {
      FHlazySearchTreeNode<Comparable> *minNode = findMin(root->rtChild);
      root->data = minNode->data;
      removeHard(root->rtChild, minNode->data);
   }
   else
   {
      FHlazySearchTreeNode<Comparable> *nodeToRemove = root;
      root = (root->lftChild != NULL)? root->lftChild : root->rtChild;
      delete nodeToRemove;
   }
   return true;
}

template <class Comparable>
bool FHlazySearchTree <Comparable>::remove(
   FHlazySearchTreeNode<Comparable> * &root, const Comparable &x)
{
   /*if (root == NULL)
      return false;

   if (x < root->data)
      return remove(root->lftChild, x);
   if (root->data < x)
      return remove(root->rtChild, x);

   // found the node
   if (root->lftChild != NULL && root->rtChild != NULL)
   {
      FHlazySearchTreeNode<Comparable> *minNode = findMin(root->rtChild);
      //root->data = minNode->data;
      remove(root->rtChild, minNode->data);
      //cout<<root->data<<endl;
      root->deleted = true;
   }
   else
   {
      FHlazySearchTreeNode<Comparable> *nodeToRemove = root;
      //root = (root->lftChild != NULL)? root->lftChild : root->rtChild;            
   }
   return true;
   */
   if ((find(root,x)) && (find(root,x)->deleted==false))
   {
      find(root, x)->deleted = true;
      return true;
   }   
   return false;
}

template <class Comparable>
void FHlazySearchTree <Comparable>::makeEmpty(
   FHlazySearchTreeNode<Comparable> * &subtreeToDelete)
{
   if (subtreeToDelete == NULL)
      return;
   // remove children
   makeEmpty(subtreeToDelete->lftChild);
   makeEmpty(subtreeToDelete->rtChild);
   // clear client's pointer
   delete subtreeToDelete;
   subtreeToDelete = NULL;
   --mSize;
}

template <class Comparable>
int FHlazySearchTree <Comparable>::findHeight(FHlazySearchTreeNode<Comparable> *treeNode,
   int height ) const
{
   int leftHeight, rightHeight;
   if (treeNode == NULL)
      return height;
   height++;
   leftHeight = findHeight(treeNode->lftChild, height);
   rightHeight = findHeight(treeNode->rtChild, height);
   return (leftHeight > rightHeight)? leftHeight : rightHeight;
}
template <typename Object>
class PrintObject
{
public:
   void operator()(Object obj)
   {
      cout << obj << " ";
   }
};
#endif
/*-------------------------------------------RUNS------------------------------------------

msilin@235x18:/home/msilin/CS2C $ g++ FHsearch_tree.cpp -o FH
^[[Amsilin@235x18:/home/msilin/CS2C $ ./FH

initial size: 0
After populating -- traversal and sizes: 
10 20 30 50 60 70 

tree 1 size: 6  Hard size: 6
Collecting garbage on new tree - should be no garbage.
tree 1 size: 6  Hard size: 6

Attempting 1 removal: 
removed 20
tree 1 size: 5  Hard size: 6
true
10 30 50 60 70 
Collecting Garbage - should clean 1 item. 
tree 1 size: 5  Hard size: 5
Collecting Garbage again - no change expected. 
tree 1 size: 5  Hard size: 5


Adding 'hard' 22 - should see new sizes. 
10 22 30 50 60 70 
tree 1 size: 6  Hard size: 6

After soft removal. 
10 30 50 60 70 
tree 1 size: 5  Hard size: 6
Repeating soft removal. Should see no change. 
10 30 50 60 70 
tree 1 size: 5  Hard size: 6
Soft insertion. Hard size should not change. 
10 22 30 50 60 70 
tree 1 size: 6  Hard size: 6


Attempting 100 removals: 
10 22 30 50 60 70 removed 70
removed 60
removed 50
removed 30
removed 22
removed 10

tree 1 size: 0  Hard size: 6

tree 1 size: 0  Hard size: 0

searchTree now:


searchTree2:
10 20 30 50 60 70 100 200 300 500 600 700 
tree 2 size: 12  Hard size: 12
msilin@235x18:/home/msilin/CS2C $ ^C
msilin@235x18:/home/msilin/CS2C $ 
---------------------------------------------------------------------------------------*/




