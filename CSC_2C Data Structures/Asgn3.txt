// Assignment #3
// CS 2C, Foothill College, Michael Silin
/*----------------------------------MAIN--------------------------*/
#include <time.h>

#include <iomanip>
#include <iostream>
#include <sstream>

using namespace std;
#define MAT_SIZE 250
typedef float* DynMat[MAT_SIZE];

void matMultDyn(const DynMat & matA, const DynMat & matB, DynMat & matC, int size);
void matShowDyn(const DynMat & matA, int start, int size);

int main()
{
   int r, c;
   clock_t startTime, stopTime;
   double randFrac;
   int randRow, randCol, smallPercent;


   // non-sparse dynamic matrix
   DynMat matDyn, matDynAns;


   // allocate rows and initialize to 0
   for (r = 0; r < MAT_SIZE; r++)
   {
      matDyn[r] = new float[MAT_SIZE];
      for (c = 0; c < MAT_SIZE; c++)
      {
         matDyn[r][c] = 0;
      }
   }

   // generate small% non-default values bet .1 and 1
   smallPercent = MAT_SIZE / 20. * MAT_SIZE;  // div by 20. means 5%, of course
  

      for (r = 0; r < smallPercent; r++) {
         randRow = ((double)rand() / RAND_MAX)*(MAT_SIZE);
         randCol = ((double)rand() / RAND_MAX)*(MAT_SIZE);
         matDyn[randRow][randCol] = ((double)rand() / RAND_MAX)*(0.9) + 0.1;
      }
   

   // 10x10 submatrix in lower right
   matShowDyn(matDyn, MAT_SIZE - 10, 10);

   startTime = clock();  // ------------------ start
   matMultDyn(matDyn, matDyn, matDynAns, MAT_SIZE);
   stopTime = clock();  // ---------------------- stop

   matShowDyn(matDynAns, MAT_SIZE - 10, 10);
   cout << "\nSize = " << MAT_SIZE << " Dyn Array Mult Elapsed Time: "
      << (double)(stopTime - startTime) / (double)CLOCKS_PER_SEC
      << " seconds." << endl << endl;

   // clean up
   for (r = 0; r < MAT_SIZE; r++)
   {
      delete[] matDyn[r];
      delete[] matDynAns[r];
   }
   cout << endl;
}



void matMultDyn(const DynMat & matA, const DynMat & matB, DynMat & matC, int size)
{
   if (size == 0)
   {
      return;
   }
   float temp = 0;
   for (int i = 0; i < size; i++)
   {
      matC[i] = new float[size];
      for (int j = 0; j < size; j++)
      {
         for (int k = 0; k < size; k++)
         {
            temp = temp + matA[i][k] * matB[j][k];
         }
         matC[i][j] = temp;
         temp = 0;
      }
   }
}
void matShowDyn(const DynMat & matA, int start, int size)
{
   int r, c;

   if (start < 0 || size < 0)
      return;

   for (r = start; r < start + size; r++)
   {
      for (c = start; c < start + size; c++)
      {
         cout << setw(4) << setfill('0') << setprecision(2) << fixed;
         cout << matA[r][c] << " ";
      }
      cout << endl;
   }
   cout << endl << endl;
}
/*----------------------------------RUNS--------------------------*/

0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
0.00 0.00 0.00 0.19 0.00 0.00 0.00 0.00 0.00 0.00
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.76 0.00 0.00
0.59 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
0.00 0.00 0.00 0.00 0.00 0.56 0.00 0.00 0.00 0.00
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
0.00 0.00 0.00 0.00 0.00 0.00 0.88 0.00 0.00 0.00


1.30 0.00 0.60 0.00 0.00 0.00 0.64 0.00 0.00 0.00
0.00 0.58 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
0.60 0.00 2.12 0.04 0.24 0.26 0.00 0.00 0.00 0.00
0.00 0.00 0.04 3.88 0.34 0.00 0.00 0.60 0.00 0.23
0.00 0.00 0.24 0.34 2.53 0.19 0.00 0.00 0.00 0.00
0.00 0.00 0.26 0.00 0.19 1.44 0.00 0.00 0.00 0.00
0.64 0.00 0.00 0.00 0.00 0.00 2.83 0.48 0.00 0.00
0.00 0.00 0.00 0.60 0.00 0.00 0.48 2.01 0.00 0.00
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 1.08 0.00
0.00 0.00 0.00 0.23 0.00 0.00 0.00 0.00 0.00 2.37



Size = 124 Dyn Array Mult Elapsed Time: 0.01 seconds.

0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
0.00 0.56 0.00 0.00 0.00 0.00 0.00 0.15 0.00 0.00
0.00 0.00 0.35 0.00 0.00 0.00 0.00 0.00 0.00 0.00
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
0.00 0.00 0.00 0.00 0.44 0.00 0.00 0.00 0.00 0.57
0.00 0.00 0.88 0.00 0.00 0.00 0.00 0.00 0.00 0.00


4.35 0.14 0.07 0.00 0.00 0.00 0.00 0.00 0.30 0.00
0.14 2.37 0.00 0.15 0.00 0.00 0.00 0.00 0.70 0.52
0.07 0.00 3.05 0.00 0.00 0.28 0.00 0.00 0.53 0.16
0.00 0.15 0.00 4.35 0.00 0.00 0.00 0.00 0.00 0.00
0.00 0.00 0.00 0.00 4.46 0.00 0.00 0.00 0.20 0.32
0.00 0.00 0.28 0.00 0.00 2.76 0.64 0.17 0.03 0.43
0.00 0.00 0.00 0.00 0.00 0.64 4.62 0.17 0.70 0.31
0.00 0.00 0.00 0.00 0.00 0.17 0.17 3.51 0.34 0.00
0.30 0.70 0.53 0.00 0.20 0.03 0.70 0.34 6.26 0.00
0.00 0.52 0.16 0.00 0.32 0.43 0.31 0.00 0.00 4.54



Size = 248 Dyn Array Mult Elapsed Time: 0.04 seconds.

0.23 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.48 0.00 0.00
0.00 0.00 0.00 0.00 0.00 0.00 0.15 0.00 0.00 0.00
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
0.00 0.00 0.79 0.00 0.00 0.00 0.00 0.00 0.00 0.00
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
0.00 0.44 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.69
0.00 0.00 0.67 0.00 0.00 0.00 0.00 0.00 0.00 0.00
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00


10.58 0.34 0.42 0.29 0.00 0.71 0.08 0.34 1.70 0.66
0.34 9.22 0.81 0.42 0.00 0.00 0.29 0.20 0.64 0.00
0.42 0.81 7.12 0.82 0.00 1.16 0.98 0.47 0.46 0.66
0.29 0.42 0.82 6.11 1.01 0.17 0.87 0.00 0.00 0.54
0.00 0.00 0.00 1.01 6.41 0.17 0.85 0.00 0.53 0.00
0.71 0.00 1.16 0.17 0.17 6.71 0.15 1.02 0.50 0.00
0.08 0.29 0.98 0.87 0.85 0.15 6.20 0.52 0.29 0.00
0.34 0.20 0.47 0.00 0.00 1.02 0.52 7.16 0.54 0.33
1.70 0.64 0.46 0.00 0.53 0.50 0.29 0.54 9.63 0.59
0.66 0.00 0.66 0.54 0.00 0.00 0.00 0.33 0.59 7.34



Size = 372 Dyn Array Mult Elapsed Time: 0.12 seconds.

0.00 0.00 0.00 0.00 0.15 0.00 0.00 0.00 0.00 0.00
0.73 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
0.79 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.57
0.00 0.00 0.00 0.00 0.00 0.21 0.00 0.00 0.00 0.69
0.93 0.00 0.49 0.00 0.00 0.00 0.00 0.00 0.00 0.00
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00


13.02 0.71 0.00 2.22 0.00 0.64 0.39 0.00 0.17 0.12
0.71 9.68 1.21 0.09 0.17 0.81 0.00 0.00 1.11 0.79
0.00 1.21 7.86 0.00 0.17 0.00 0.00 0.35 1.05 0.00
2.22 0.09 0.00 10.77 0.65 0.11 0.42 1.53 0.00 0.10
0.00 0.17 0.17 0.65 6.52 0.00 0.00 0.00 0.27 0.50
0.64 0.81 0.00 0.11 0.00 10.15 0.17 0.82 0.20 0.00
0.39 0.00 0.00 0.42 0.00 0.17 8.32 0.93 0.31 0.63
0.00 0.00 0.35 1.53 0.00 0.82 0.93 10.12 0.10 0.32
0.17 1.11 1.05 0.00 0.27 0.20 0.31 0.10 11.97 1.29
0.12 0.79 0.00 0.10 0.50 0.00 0.63 0.32 1.29 8.98



Size = 496 Dyn Array Mult Elapsed Time: 0.28 seconds.

1) What was the smallest M that gave you a non-zero time? 124
2) What happened when you doubled M , tripled it, quadrupled it, etc?  Give several M values and their times in a table. 

M Value |   Time    |
124          .01
248          .04 
372          .12
496          .28
700          .8         

Looks exponential. 

3) How large an M can you use before the program refuses to run (exception or run-time error due to memory overload) or it takes so long you can't wait for the run?
about 750
4) How did the data agree or disagree with your original time complexity estimate? 

My original estimate was O(n^3). Our first value was .01 seconds, for a size of 124. When we multiply the size by 5, based on my estimate I predict the time to increase by a factor of 5^3. 
This would give us 1.25 seconds. Our time value seems to be steadily approaching this limit. 