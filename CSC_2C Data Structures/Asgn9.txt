// CS 2C Assignment #9. Michael Silin

// client file --------------------------------------------------
// FHflowGraph client
// CS 2C Foothill College
#include <iostream>
#include <string>
using namespace std;
#include "FHflowGraph.h"

// --------------- main ---------------
int main()
{
   int finalFlow;
   cout << "1st test\n";
   // build graph
   FHflowGraph<string, int> myG;

   myG.addEdge("s","a", 3);    myG.addEdge("s","b", 2); 
   myG.addEdge("a","b", 1);    myG.addEdge("a","c", 3); myG.addEdge("a","d", 4); 
   myG.addEdge("b","d", 2);
   myG.addEdge("c","t", 2); 
   myG.addEdge("d","t", 3);  

   // show the original flow graph
   myG.showResAdjTable();
   myG.showFlowAdjTable();

   myG.setStartVert("s");
   myG.setEndVert("t");
   finalFlow = myG.findMaxFlow();

   cout << "Final flow: " << finalFlow << endl;

   myG.showResAdjTable();
   myG.showFlowAdjTable();
   myG.clear();
   //2nd test

   cout << "2nd test\n";
   // build graph
 

   myG.addEdge("s", "a", 7);    myG.addEdge("s", "b", 5);
   myG.addEdge("a", "b", 6);    myG.addEdge("a", "c", 3); myG.addEdge("a", "d", 9);
   myG.addEdge("b", "d", 4);
   myG.addEdge("c", "t", 2);
   myG.addEdge("d", "t", 1);

   // show the original flow graph
   myG.showResAdjTable();
   myG.showFlowAdjTable();

   myG.setStartVert("s");
   myG.setEndVert("t");
   finalFlow = myG.findMaxFlow();

   cout << "Final flow: " << finalFlow << endl;

   myG.showResAdjTable();
   myG.showFlowAdjTable();
   myG.clear();







   return 0;  
}


// ---------------FHflowGRAPH.h--------------------------------------------------

// Template definitions for FHflowGraph.  
#ifndef FHflowGraph_H
#define FHflowGraph_H
#include <limits.h>
#include <utility>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <stack>
#include <iostream>
#include <functional>
using namespace std;

// CostType is some numeric type that expresses cost of edges
// Object is the non-graph data for a vertex
template <class Object, typename CostType>
class FHflowVertex
{
   // internal typedefs to simplify syntax
   typedef FHflowVertex<Object, CostType>* VertPtr;
   typedef map<VertPtr, CostType> EdgePairList;

public:
   static int nSortKey;
   static stack<int> keyStack;
   static enum { SORT_BY_DATA, SORT_BY_DIST } eSortType;
   static bool setNSortType(int whichType);
   static void pushSortKey() { keyStack.push(nSortKey); }
   static void popSortKey() { nSortKey = keyStack.top(); keyStack.pop(); }
   static int const INFINITY_FH = INT_MAX;  // defined in limits.h
   
   EdgePairList flowAdjList, resAdjList;
   Object data;
   CostType dist;
   VertPtr nextInPath;  // used for client-specific info

   FHflowVertex(const Object & x = Object());

   void addToFlowAdjList(VertPtr neighbor, CostType cost);
   void addToResAdjList(VertPtr neighbor, CostType cost);
   void showFlowAdjList();
   void showResAdjList();
   bool operator<(const FHflowVertex<Object, CostType> & rhs) const;
   const FHflowVertex<Object, CostType> & operator = (const FHflowVertex<Object, CostType> & rhs);
   
};

// static const initializations for Vertex --------------
template <class Object, typename CostType>
int FHflowVertex<Object, CostType>::nSortKey = FHflowVertex<Object, CostType>::SORT_BY_DATA;

template <class Object, typename CostType>
stack<int> FHflowVertex<Object, CostType>::keyStack;
// ------------------------------------------------------

template <class Object, typename CostType>
bool FHflowVertex<Object, CostType>::setNSortType(int whichType)
{
   switch (whichType)
   {
   case SORT_BY_DATA:
   case SORT_BY_DIST:
      nSortKey = whichType;
      return true;
   default:
      return false;
   }
}

template <class Object, typename CostType>
FHflowVertex<Object, CostType>::FHflowVertex(const Object & x)
   : data(x), dist((CostType)INFINITY_FH),
   nextInPath(NULL)
{
   // nothing to do
}


template <class Object, typename CostType>
bool FHflowVertex<Object, CostType>::operator<(
   const FHflowVertex<Object, CostType> & rhs) const
{
   switch (nSortKey)
   {
   case SORT_BY_DIST:
      return (dist < rhs.dist);
   case SORT_BY_DATA:
      return (data < rhs.data);
   default:
      return false;
   }
}

template <class Object, typename CostType>
const FHflowVertex<Object, CostType> & FHflowVertex<Object, CostType>::operator=(
   const FHflowVertex<Object, CostType> & rhs)
{
   flowAdjList = rhs.flowAdjList;
   data = rhs.data;
   dist = rhs.dist;
   nextInPath = rhs.nextInPath;;
   return *this;
}

template <class Object, typename CostType>
void FHflowVertex<Object, CostType>::addToResAdjList
(FHflowVertex<Object, CostType> *neighbor, CostType cost)
{
   resAdjList[neighbor] = cost;
}

template <class Object, typename CostType>
void FHflowVertex<Object, CostType>::addToFlowAdjList
(FHflowVertex<Object, CostType> *neighbor, CostType cost)
{
   flowAdjList[neighbor] = cost;
}
template <class Object, typename CostType>
void FHflowVertex<Object, CostType>::showFlowAdjList()
{
   typename EdgePairList::iterator iter;

   cout << "Flow Adj List for " << data << ": ";
   for (iter = flowAdjList.begin(); iter != flowAdjList.end(); ++iter)
      cout << iter->first->data << "(" << iter->second << ") ";
   cout << endl;
}

template <class Object, typename CostType>
void FHflowVertex<Object, CostType>::showResAdjList()
{
   typename EdgePairList::iterator iter;

   cout << "Res Adj List for " << data << ": ";
   for (iter = resAdjList.begin(); iter != resAdjList.end(); ++iter)
      cout << iter->first->data << "(" << iter->second << ") ";
   cout << endl;
}

/*main class*/

template <class Object, typename CostType>
class FHflowGraph
{
   // internal typedefs to simplify syntax
   typedef FHflowVertex<Object, CostType> Vertex;
   typedef FHflowVertex<Object, CostType>* VertPtr;
   typedef map<VertPtr, CostType> EdgePairList;
   typedef set<VertPtr> VertPtrSet;
   typedef set<Vertex> VertexSet;


private:
   VertPtrSet vertPtrSet;
   VertexSet vertexSet;
   VertPtr startVertPtr, endVertPtr;

public:
   FHflowGraph();

   void addEdge(const Object &source, const Object &dest, CostType cost);
   VertPtr addToVertexSet(const Object & object);
   void showFlowAdjTable();
   void showResAdjTable();
   void clear();
   bool setStartVert(const Object &x);   //m
   bool setEndVert(const Object &x);
   CostType findMaxFlow(); 
private:
   // algorithms
   VertPtr getVertexWithThisData(const Object & x);
   bool establishNextFlowPath();
   CostType getLimitingFlowOnResPath();
   CostType getCostOfResEdge(VertPtr src, VertPtr dst);
   bool adjustPathByCost(CostType cost);
   bool addCostToResEdge(VertPtr src, VertPtr dst, CostType cost);
   bool addCostToFlowEdge(VertPtr src, VertPtr dst, CostType cost);
};

template <class Object, typename CostType>
FHflowGraph<Object, CostType>::FHflowGraph() {

}

template <class Object, typename CostType>
FHflowVertex<Object, CostType>* FHflowGraph<Object, CostType>::addToVertexSet(
   const Object & object)
{
   pair<typename VertexSet::iterator, bool> retVal;
   VertPtr vPtr;
   // save sort key for client
   Vertex::pushSortKey();
   Vertex::setNSortType(Vertex::SORT_BY_DATA);
   // build and insert vertex into master list
   retVal = vertexSet.insert(Vertex(object));
   // get pointer to this vertex and put into vert pointer list
   vPtr = (VertPtr)&*retVal.first;
   vertPtrSet.insert(vPtr);
   Vertex::popSortKey();  // restore client sort key
   return vPtr;
}

template <class Object, typename CostType>
void FHflowGraph<Object, CostType>::clear()
{
   vertexSet.clear();
   vertPtrSet.clear();
   startVertPtr = NULL;
   endVertPtr = NULL;
}



template <class Object, typename CostType>
void FHflowGraph<Object, CostType>::addEdge(
   const Object &source, const Object &dest, CostType cost)
{
   VertPtr src, dst;
   // put both source and dest into vertex list(s) if not already there
   src = addToVertexSet(source);
   dst = addToVertexSet(dest);
   // add dest to source's adjacency listS
   src->addToFlowAdjList(dst, 0);
   src->addToResAdjList(dst, cost);
   dst->addToResAdjList(dst, 0);

}

template <class Object, typename CostType>
void FHflowGraph<Object, CostType>::showFlowAdjTable()
{
   typename VertPtrSet::iterator iter;

   cout << "------------------------ \n";
   for (iter = vertPtrSet.begin(); iter != vertPtrSet.end(); ++iter)
      (*iter)->showFlowAdjList();
   cout << endl;
}


template <class Object, typename CostType>
void FHflowGraph<Object, CostType>::showResAdjTable()
{
   typename VertPtrSet::iterator iter;

   cout << "------------------------ \n";
   for (iter = vertPtrSet.begin(); iter != vertPtrSet.end(); ++iter)
      (*iter)->showFlowAdjList();
   cout << endl;
}

template <class Object, typename CostType>
bool FHflowGraph<Object, CostType>::setStartVert(const Object &x) {
   typename VertPtrSet::iterator iter;
   for (iter = vertPtrSet.begin(); iter != vertPtrSet.end(); iter++) {
      if ((*iter)->data == x) {
         startVertPtr = (*iter);
         return true;
      }
   }
   return false;
}
template <class Object, typename CostType>
bool FHflowGraph<Object, CostType>::setEndVert(const Object &x) {
   typename VertPtrSet::iterator iter;
   for (iter = vertPtrSet.begin(); iter != vertPtrSet.end(); iter++) {
      if ((*iter)->data == x) {
         endVertPtr = (*iter);
         return true;
      }
   }
   return false;
}

template <class Object, typename CostType>
CostType FHflowGraph<Object, CostType>::findMaxFlow() {
   CostType   temp, maxFlow = 0;
   while (establishNextFlowPath()) {
      temp = getLimitingFlowOnResPath();
      maxFlow += temp; 
      adjustPathByCost(temp);
   }
   return maxFlow;
}


template <class Object, typename CostType>
bool FHflowGraph<Object, CostType>::establishNextFlowPath() {
   typename VertPtrSet::iterator vIter;
   typename EdgePairList::iterator edgePrIter;
   VertPtr wPtr, sPtr, vPtr;
   CostType costVW;
   queue<VertPtr> partiallyProcessedVerts;

   sPtr = getVertexWithThisData(startVertPtr->data);
   if (sPtr == NULL)
      return false;
   
   // initialize the vertex list and place the starting vert in p_p_v queue

   for (vIter = vertPtrSet.begin(); vIter != vertPtrSet.end(); ++vIter) {
      (*vIter)->dist = Vertex::INFINITY_FH;
      (*vIter)->nextInPath = NULL;
   }
  
   sPtr->dist = 0;
   partiallyProcessedVerts.push(sPtr); // or, FHbinHeap::insert(), e.g.
                                      
                                       // outer dijkstra loop
   while (!partiallyProcessedVerts.empty()) 
   {
      vPtr = partiallyProcessedVerts.front();
      partiallyProcessedVerts.pop();
      // inner dijkstra loop: for each vert adj to v, lower its dist to s if you can
      for (edgePrIter = vPtr->resAdjList.begin(); edgePrIter != vPtr->resAdjList.end();
         edgePrIter++) 
      {
         wPtr = edgePrIter->first;
         costVW = edgePrIter->second;
         if (costVW != 0 && vPtr->dist + costVW < wPtr->dist) {
            wPtr->dist = vPtr->dist + costVW;
            wPtr->nextInPath = vPtr;
            // *wPtr now has improved distance, so add wPtr to p_p_v queue
            partiallyProcessedVerts.push(wPtr);
            if (wPtr == endVertPtr)
               return true;
         }
      }
   }
   return false;
}

template <class Object, typename CostType>
CostType FHflowGraph<Object, CostType>::getLimitingFlowOnResPath() {
   VertPtr vp, start, stop;
   stack<VertPtr> pathStack;
   start = getVertexWithThisData(startVertPtr->data);
   stop = getVertexWithThisData(endVertPtr->data);
   CostType   temp, temp2;
   if (start == NULL || stop == NULL)
      return false;
   temp = stop->dist;
   for (vp = stop; vp != start; vp = vp->nextInPath) {
      if (vp->nextInPath == NULL) {
         cout << "No path found " << endl;
         return false;
      }

      temp2 = getCostOfResEdge(vp->nextInPath, vp);
      if (temp < temp2);
      temp = temp2;
   }
   return temp;
}

template <class Object, typename CostType>
bool FHflowGraph<Object, CostType>::adjustPathByCost(CostType cost) {
   VertPtr  vp, start, stop;
   stack<VertPtr> pathStack;
   start = getVertexWithThisData(startVertPtr->data);
   stop = getVertexWithThisData(endVertPtr->data);
   CostType   temp = getLimitingFlowOnResPath();
   if (start == NULL || stop == NULL)
      return false;
   for (vp = stop; vp != start; vp = vp->nextInPath) {
      //      cout << "adjust:" << vp->data << "->" << vp->nextInPath->data << endl;
      if (vp->nextInPath == NULL) {
         cout << "No path found " << endl;
         return 0;
      }
      addCostToResEdge(vp->nextInPath, vp, temp);
      addCostToFlowEdge(vp->nextInPath, vp, temp);
   }
   return true;
}

template <class Object, typename CostType>
FHflowVertex<Object, CostType>* FHflowGraph<Object, CostType>::getVertexWithThisData(
   const Object & x)
{
   typename VertexSet::iterator findResult;
   Vertex vert(x);

   Vertex::pushSortKey();  // save client sort key
   Vertex::setNSortType(Vertex::SORT_BY_DATA);
   findResult = vertexSet.find(vert);
   Vertex::popSortKey();  // restore client value

   if (findResult == vertexSet.end())
      return NULL;
   return  (VertPtr)&*findResult;     // the address of the vertex in the set of originals
}

// applies dijkstra, prints all distances - could be modified to skip dijkstra


// applies dijkstra, prints shortest path - could be modified to skip dijkstra









template <class Object, typename CostType>
CostType FHflowGraph<Object, CostType>::getCostOfResEdge(VertPtr src, VertPtr dst)
{
   typename EdgePairList::iterator edgePrIter;
   for (edgePrIter = src->resAdjList.begin(); edgePrIter->first != dst; edgePrIter++);
   return edgePrIter->second;
}

template <class Object, typename CostType>
bool FHflowGraph<Object, CostType>::addCostToResEdge(VertPtr src, VertPtr dst, CostType cost)
{
   typename EdgePairList::iterator edgePrIter;
   if (src == NULL || dst == NULL)
      return false;
   for (edgePrIter = src->resAdjList.begin(); edgePrIter != src->resAdjList.end(); edgePrIter++)
   {
      if (edgePrIter->first == dst) {
         src->addToResAdjList(edgePrIter->first, edgePrIter->second - cost);
      }
   }
   for (edgePrIter = dst->resAdjList.begin(); edgePrIter != dst->resAdjList.end(); edgePrIter++)
   {
      if (edgePrIter->first == src)
      {
         dst->addToResAdjList(edgePrIter->first, edgePrIter->second + cost);
      }
   }
   return true;
}

template <class Object, typename CostType>
bool FHflowGraph<Object, CostType>::addCostToFlowEdge(VertPtr src, VertPtr dst, CostType cost)
{
   typename EdgePairList::iterator edgePrIter;
   if (src == NULL || dst == NULL)
      return false;
   for (edgePrIter = src->flowAdjList.begin(); edgePrIter != src->flowAdjList.end(); edgePrIter++)
   {
      if (edgePrIter->first == dst)
      {
         src->addToFlowAdjList(edgePrIter->first, edgePrIter->second + cost);
      }
   }
   return true;
}

#endif

//-----------------------------------runs---------------------------------

1st test
------------------------
Flow Adj List for s: a(0) b(0)
Flow Adj List for a: b(0) c(0) d(0)
Flow Adj List for b: d(0)
Flow Adj List for c: t(0)
Flow Adj List for d: t(0)
Flow Adj List for t:

------------------------
Flow Adj List for s: a(0) b(0)
Flow Adj List for a: b(0) c(0) d(0)
Flow Adj List for b: d(0)
Flow Adj List for c: t(0)
Flow Adj List for d: t(0)
Flow Adj List for t:

Final flow: 5
------------------------
Flow Adj List for s: a(3) b(2)
Flow Adj List for a: b(0) c(3) d(0)
Flow Adj List for b: d(2)
Flow Adj List for c: t(3)
Flow Adj List for d: t(2)
Flow Adj List for t:

------------------------
Flow Adj List for s: a(3) b(2)
Flow Adj List for a: b(0) c(3) d(0)
Flow Adj List for b: d(2)
Flow Adj List for c: t(3)
Flow Adj List for d: t(2)
Flow Adj List for t:

2nd test
------------------------
Flow Adj List for a: b(0) c(0) d(0)
Flow Adj List for s: a(0) b(0)
Flow Adj List for b: d(0)
Flow Adj List for c: t(0)
Flow Adj List for d: t(0)
Flow Adj List for t:

------------------------
Flow Adj List for a: b(0) c(0) d(0)
Flow Adj List for s: a(0) b(0)
Flow Adj List for b: d(0)
Flow Adj List for c: t(0)
Flow Adj List for d: t(0)
Flow Adj List for t:

Final flow: 12
------------------------
Flow Adj List for a: b(0) c(7) d(0)
Flow Adj List for s: a(7) b(5)
Flow Adj List for b: d(5)
Flow Adj List for c: t(7)
Flow Adj List for d: t(5)
Flow Adj List for t:

------------------------
Flow Adj List for a: b(0) c(7) d(0)
Flow Adj List for s: a(7) b(5)
Flow Adj List for b: d(5)
Flow Adj List for c: t(7)
Flow Adj List for d: t(5)
Flow Adj List for t:

Press any key to continue . . .