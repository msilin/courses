//  FHsplayTree.h Michael Silin 

#ifndef FHsplayTree_h
#define FHsplayTree_h
#include "FHsearch_tree.h"

template <class Comparable>
class FHsplayTree : public FHsearch_tree<Comparable> 
{
public:
   Comparable data;
   bool    insert(const Comparable &x);
   bool    remove(const Comparable &x);
   bool    contains(Comparable &x);
   Comparable &find(Comparable &x);

   const  Comparable &showRoot() 
   {
      if (!this->mRoot)
         return data;
      return this->mRoot->data;
   }

protected:
   void    splay(FHs_treeNode<Comparable> * & root, const Comparable & x);
   void    rotateWithLeftChild(FHs_treeNode<Comparable> * & k2);
   void    rotateWithRightChild(FHs_treeNode<Comparable> * & k2);
};





template <class Comparable>
void  FHsplayTree<Comparable>::splay(FHs_treeNode<Comparable> * & root, const Comparable & x) 
{
   FHs_treeNode<Comparable>  *rightTree = NULL, * leftTree = NULL, * rightTreeMin = NULL, *leftTreeMax = NULL;
   while (root != NULL) 
   {
      if (x < root->data) 
      {
         if (root->lftChild==NULL)
            break;
         if (x < root->lftChild->data) 
         {
            rotateWithLeftChild(root);
            if (root->lftChild==NULL)
               break;
         }
         FHs_treeNode<Comparable> *leftChild = root->lftChild;         
         if (rightTree==NULL) 
         {
            rightTree = root;
            rightTreeMin = root;
         }
         else 
         {
            rightTreeMin->lftChild = root;
            rightTreeMin = rightTreeMin->lftChild;
         }
         root->lftChild = NULL;
         root = leftChild;
      }
      else if (x > root->data) 
      {
         if (root->rtChild==NULL)
            break;
         if (x>root->rtChild->data)
            rotateWithRightChild(root);
         if (root->rtChild==NULL)
            break;
         FHs_treeNode<Comparable> *rightChild = root->rtChild;
         
         if (leftTree==NULL) {
            leftTree = root;
            leftTreeMax = root;
         }
         else {
            leftTreeMax->rtChild = root;
            leftTreeMax = leftTreeMax->rtChild;
         }
         root->rtChild = NULL;
         root = rightChild;
      }
      else {
         break;
      }
   }
   if (leftTree != NULL) 
   {
      leftTreeMax->rtChild = root->lftChild;
      root->lftChild = leftTree;
   }
   if (rightTree != NULL) 
   {
      rightTreeMin->lftChild = root->rtChild;
      root->rtChild = rightTree;
   }
}

template <class Comparable>
void  FHsplayTree<Comparable>::rotateWithLeftChild(FHs_treeNode<Comparable> * & k2) 
{
   FHs_treeNode<Comparable> *k1 = k2->lftChild;
   k2->lftChild = k1->rtChild;
   k1->rtChild = k2;
   //k2->setHeight( max( heightOf(k2->lftChild),  heightOf(k2->rtChild) ) + 1 );
   //k1->setHeight(max(heightOf(k1->lftChild), k2->getHeight()) + 1);
   k2 = k1;
}
template <class Comparable>
void  FHsplayTree<Comparable>::rotateWithRightChild(FHs_treeNode<Comparable> * & k2) {
   FHs_treeNode<Comparable> *k1 = k2->rtChild;
   k2->rtChild = k1->lftChild;
   k1->lftChild = k2;
   //k2->setHeight( max( heightOf(k2->lftChild),  heightOf(k2->rtChild) ) + 1 );
   //k1->setHeight(max(heightOf(k1->lftChild), k2->getHeight()) + 1);
   k2 = k1;
}

template <class Comparable>
bool  FHsplayTree<Comparable>::insert(const Comparable &x) {
   if ( this->mRoot==NULL) 
   {
      FHs_treeNode<Comparable> * tempNode = new FHs_treeNode<Comparable>(x);
      this->mSize++;
      this->mRoot = tempNode;
      return true;
   }
   splay(this->mRoot, x);
   if (x < this->mRoot->data) 
   {
      FHs_treeNode<Comparable> * tempNode = new FHs_treeNode<Comparable>(x, this->mRoot->lftChild, this->mRoot);
      this->mSize++;
      this->mRoot = tempNode;      
      return true;
   }
   else if (x>this->mRoot->data) 
   {
      FHs_treeNode<Comparable> * tempNode = new FHs_treeNode<Comparable>(x, this->mRoot, this->mRoot->rtChild);
      this->mSize++;
      this->mRoot = tempNode;      
      return true;
   }
   else
      return false;
}
template <class Comparable>
bool   FHsplayTree<Comparable>::remove(const Comparable &x) 
{
   if (this->mRoot==NULL)
      return false;
   splay(this->mRoot, x);
   if (x < this->mRoot->data || x > this->mRoot->data)
      return false;
   FHs_treeNode<Comparable> *newRoot = NULL;
   if (this->mRoot->lftChild==NULL)
   {
      newRoot = this->mRoot->rtChild;
   }
   else 
   {
      newRoot = this->mRoot->lftChild;
      splay(newRoot, x);
      newRoot->rtChild = this->mRoot->rtChild;
   }
   delete this->mRoot;
   this->mRoot = newRoot;
   return true;
}

template <class Comparable>
bool  FHsplayTree<Comparable>::contains(Comparable &x) 
{
   try
   {
      if (this->find(x)) 
      {
         return true;
      }
   }
   catch (typename FHsearch_tree<Comparable>::NotFoundException) 
   {
      return false;
   }
   return false;
}

template <class Comparable>
Comparable & FHsplayTree<Comparable>::find(Comparable &x) 
{
   splay(this->mRoot, x);
   if (!((x < this->mRoot->data) || (this->mRoot->data < x))) 
   {
      return (this->mRoot->data);
   }
   else
      throw typename FHsearch_tree<Comparable>::NotFoundException();
}
#endif 

//--------------------------Main-----------------------------
// Assignment #5 Instructor Solution
// CS 2C, Foothill College, Michael Loceff

// Client / Splay Tree ----------------------------------------------

#include <iostream>
#include "FHsplayTree.h"
using namespace std;

template <typename Object>
class PrintObject
{
public:
   void operator()(Object obj)
   {
      cout << obj << " ";
   }
};

int main()
{
   int k;
   FHsplayTree<int> searchTree;
   //FHsearch_tree<int> searchTree;
   PrintObject<int> intPrinter;

   searchTree.traverse(intPrinter);
   //cout << searchTree.showRoot() << endl;

   cout << "Initial size: " << searchTree.size() << endl;
   for (k = 1; k <= 32; k++)
      searchTree.insert(k);
   cout << "New size: " << searchTree.size() << endl;

   cout << "\nTraversal: \n";
   searchTree.traverse(intPrinter);
   cout << endl << endl;

   for (k = -1; k < 10; k++)
   {
      // searchTree.contains(k);  // alt to find() - different error return
      try
      {
         searchTree.find(k);
      }
      catch (...)
      {
         cout << " oops ";
      }
      cout << "splay " << k << " --> root: " << searchTree.showRoot()
         << " height: " << searchTree.showHeight() << endl;
   }

   return 0;
}

/*--------------------------Run-----------------------------
Initial size: 0
New size: 32

Traversal:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32

 oops splay -1 --> root: 1 height: 16
 oops splay 0 --> root: 1 height: 16
splay 1 --> root: 1 height: 16
splay 2 --> root: 2 height: 9
splay 3 --> root: 3 height: 6
splay 4 --> root: 4 height: 6
splay 5 --> root: 5 height: 5
splay 6 --> root: 6 height: 6
splay 7 --> root: 7 height: 6
splay 8 --> root: 8 height: 7
splay 9 --> root: 9 height: 8
Press any key to continue . . .*/
